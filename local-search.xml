<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用ffmpeg命令</title>
    <link href="/2025/07/18/%E5%B8%B8%E7%94%A8FFmpeg%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/07/18/%E5%B8%B8%E7%94%A8FFmpeg%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用FFmpeg命令"><a href="#常用FFmpeg命令" class="headerlink" title="常用FFmpeg命令"></a>常用FFmpeg命令</h1><h2 id="一、格式转换"><a href="#一、格式转换" class="headerlink" title="一、格式转换"></a>一、格式转换</h2><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><ol><li><p><strong>将 MP4 转换为 AVI 格式：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> output.avi<br></code></pre></td></tr></table></figure></li><li><p><strong>将 WebM 转换为 MP4 格式：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> movie<span class="hljs-selector-class">.webm</span> movie.mp4<br></code></pre></td></tr></table></figure></li><li><p><strong>m3u8与MP4格式互转：</strong></p></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看文件编码信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ffmpeg -i input.m3u8</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!!!判断m3u8文件是否加密 ==&gt;&gt; 文件包含#EXT-X-KEY 标签, 则已加密</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">m3u8转mp4</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ffmepg -i http://localhost:8000/input.m3u8 -c copy output.mp4</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">hls_time 切片时间间隔</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切片时间最优</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ffmpeg -i input.mp4 -c:v libx264 -c:a aac -hls_time \</span><br><span class="language-bash">10 -hls_list_size 0 -hls_segment_filename <span class="hljs-string">&quot;output_%03d.ts&quot;</span> output.m3u8</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-crf 18: 恒定质量模式,值越小质量越高(18~23是高质量范围, 18接近无损)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-preset slow: 编码速度与压缩率的平衡,slow比medium压缩率更高,质量更好（但更慢</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-b:a 192k: 音频码率设为 192 kbps(比默认128k更高, 提升音质)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ffmpeg -i input.mp4 -c:v libx264 -crf 18 -preset slow -c:a aac -b:a 192k -hls_time 5 -hls_list_size 0 -hls_segment_filename <span class="hljs-string">&quot;output_%03d.ts&quot;</span> output.m3u8</span><br></code></pre></td></tr></table></figure><h2 id="二、FFmpeg-全局与主要选项"><a href="#二、FFmpeg-全局与主要选项" class="headerlink" title="二、FFmpeg 全局与主要选项"></a>二、FFmpeg 全局与主要选项</h2><ul><li>• <strong>-y</strong>：覆盖输出文件</li><li>• <strong>-n</strong>：不要覆盖输出文件</li><li>• <strong>-f fmt</strong>：强制输入或输出文件格式</li><li>• <strong>-c codecName</strong>：指定编解码器, 适用于输入和输出文件</li></ul><h2 id="三、基础命令"><a href="#三、基础命令" class="headerlink" title="三、基础命令"></a>三、基础命令</h2><ol><li><p><strong>列出可用编码格式：</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ffmpeg -codecs<br></code></pre></td></tr></table></figure></li><li><p><strong>指定输入文件和编码器：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -c:<span class="hljs-selector-tag">a</span> aac output.mp4<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、视频参数调节"><a href="#四、视频参数调节" class="headerlink" title="四、视频参数调节"></a>四、视频参数调节</h2><ol><li><p><strong>设置比特率</strong>：指定视频比特率，单位 kbit&#x2F;s</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -<span class="hljs-selector-tag">b</span>:v <span class="hljs-number">64</span>k -bufsize <span class="hljs-number">64</span>k output.avi<br></code></pre></td></tr></table></figure></li><li><p><strong>指定分辨率与帧率：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ ffmpeg -i <span class="hljs-built_in">input</span>.avi -s <span class="hljs-number">1280</span>x720 -r <span class="hljs-number">30</span> <span class="hljs-built_in">output</span>.avi<br></code></pre></td></tr></table></figure></li></ol><h2 id="五、视频编辑与剪辑"><a href="#五、视频编辑与剪辑" class="headerlink" title="五、视频编辑与剪辑"></a>五、视频编辑与剪辑</h2><ol><li>剪切视频片段</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 将视频从指定时间开始，剪切一段视频：</span><br><span class="hljs-variable">$</span> ffmpeg <span class="hljs-literal">-i</span> input.mp4 <span class="hljs-literal">-ss</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">45</span> <span class="hljs-literal">-t</span> <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">35</span> <span class="hljs-literal">-c</span> <span class="hljs-built_in">copy</span> output.mp4<br></code></pre></td></tr></table></figure><ol start="2"><li>调整视频帧速率</li></ol><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 强制视频帧率为 24 fps：</span><br><span class="hljs-variable">$ </span>ffmpeg -i input.avi -r <span class="hljs-number">24</span> output.avi<br></code></pre></td></tr></table></figure><h2 id="六、音频参数调节"><a href="#六、音频参数调节" class="headerlink" title="六、音频参数调节"></a>六、音频参数调节</h2><ol><li><p><strong>设置音频比特率：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -ab <span class="hljs-number">128</span>k output.mp3<br></code></pre></td></tr></table></figure></li><li><p><strong>修改音量：</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 增加音量</span><br>$ ffmpeg -i input.mov -<span class="hljs-built_in">filter</span>:<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;volume=1.5&quot;</span> output.mov  <br></code></pre></td></tr></table></figure></li></ol><h2 id="七、特定任务场景"><a href="#七、特定任务场景" class="headerlink" title="七、特定任务场景"></a>七、特定任务场景</h2><h3 id="1-转换为-GIF-动图"><a href="#1-转换为-GIF-动图" class="headerlink" title="1. 转换为 GIF 动图"></a>1. 转换为 GIF 动图</h3><p>截取视频片段生成 GIF：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -ss <span class="hljs-number">2</span> -t <span class="hljs-number">5</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -vf <span class="hljs-string">&quot;fps=10,scale=320:-1&quot;</span> output.gif<br></code></pre></td></tr></table></figure><h3 id="2-提取视频中的音频"><a href="#2-提取视频中的音频" class="headerlink" title="2. 提取视频中的音频"></a>2. 提取视频中的音频</h3><p> 从视频中提取音频并保存为 mp3 格式：</p>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -vn -c copy output.mp3<br></code></pre></td></tr></table></figure><h3 id="3-合并多个视频文件"><a href="#3-合并多个视频文件" class="headerlink" title="3. 合并多个视频文件"></a>3. 合并多个视频文件</h3><p>将多个同规格视频合并到一个文件中（确保视频格式一致）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 列表文件 videos.txt 格式示例</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;1.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;2.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;3.mp4&#x27;</span><br><br><span class="hljs-meta"># 合并命令</span><br>$ ffmpeg -f concat -i videos.txt -c copy output.mp4<br></code></pre></td></tr></table></figure><h2 id="八、视频压缩与编码"><a href="#八、视频压缩与编码" class="headerlink" title="八、视频压缩与编码"></a>八、视频压缩与编码</h2><h4 id="H265-双重编码"><a href="#H265-双重编码" class="headerlink" title="H265 双重编码"></a>H265 双重编码</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ ffmpeg -y -i <span class="hljs-keyword">input</span>.mp4 -c:v libx265 -b:v 2600k -pass 1 -f mp4 /dev/<span class="hljs-keyword">null</span> <span class="hljs-variable">&amp;&amp;</span> \<br>  ffmpeg -i <span class="hljs-keyword">input</span>.mp4 -c:v libx265 -b:v 2600k -pass 2 <span class="hljs-keyword">output</span>.mp4<br></code></pre></td></tr></table></figure><h2 id="九、字幕处理"><a href="#九、字幕处理" class="headerlink" title="九、字幕处理"></a>九、字幕处理</h2><h3 id="1-将字幕文件嵌入视频"><a href="#1-将字幕文件嵌入视频" class="headerlink" title="1. 将字幕文件嵌入视频"></a>1. 将字幕文件嵌入视频</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ ffmpeg -i <span class="hljs-keyword">input</span>.<span class="hljs-keyword">mov</span> -filter:v <span class="hljs-string">&quot;subtitles=subtitles.srt&quot;</span> output.<span class="hljs-keyword">mov</span><br></code></pre></td></tr></table></figure><h3 id="2-字幕格式转换"><a href="#2-字幕格式转换" class="headerlink" title="2. 字幕格式转换"></a>2. 字幕格式转换</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ ffmpeg -i <span class="hljs-keyword">subtitle.srt </span><span class="hljs-keyword">subtitle.ass </span> <span class="hljs-comment"># SRT 转 ASS</span><br></code></pre></td></tr></table></figure><h2 id="十、录屏操作"><a href="#十、录屏操作" class="headerlink" title="十、录屏操作"></a>十、录屏操作</h2><h3 id="MacOS-录屏"><a href="#MacOS-录屏" class="headerlink" title="MacOS 录屏"></a>MacOS 录屏</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> ffmpeg <span class="hljs-operator">-f</span> avfoundation <span class="hljs-literal">-i</span> <span class="hljs-number">1</span>:<span class="hljs-number">0</span> <span class="hljs-literal">-preset</span> ultrafast screen_recording.mkv<br></code></pre></td></tr></table></figure><h3 id="Windows-录屏"><a href="#Windows-录屏" class="headerlink" title="Windows 录屏"></a>Windows 录屏</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ffmpeg -hide_banner -loglevel error -stats -f gdigrab -framerate<span class="hljs-number"> 60 </span>\<br>-offset_x<span class="hljs-number"> 0 </span>-offset_y<span class="hljs-number"> 0 </span>-video_size 1920x1080 -draw_mouse<span class="hljs-number"> 1 </span>-i deskop \<br>-c:v libx264 -r<span class="hljs-number"> 60 </span>-preset ultrafast -pix_fmt yuv420p -y screen_record.mp4<br></code></pre></td></tr></table></figure><h1 id="ffprobe常见命令"><a href="#ffprobe常见命令" class="headerlink" title="ffprobe常见命令"></a>ffprobe常见命令</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 获取input.mp4的编码格式 eg. h264、hevc.</span><br>$ ffprobe -v <span class="hljs-built_in">error</span> -select_streams v:0 -show_entries <span class="hljs-attribute">stream</span>=codec_name -of <span class="hljs-attribute">default</span>=noprint_wrappers=1:nokey=1 input.mp4<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 获取input.mp4音频编码格式 eg. aac、mp3</span><br>$ ffprobe -v <span class="hljs-built_in">error</span> -select_streams a:0 -show_entries <span class="hljs-attribute">stream</span>=codec_name -of <span class="hljs-attribute">default</span>=noprint_wrappers=1:nokey=1 input.mp4<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 获取关键帧间隔</span><br>$ ffprobe -v <span class="hljs-built_in">error</span> -select_streams v:0 -show_entries <span class="hljs-attribute">frame</span>=pict_type -of csv input.mp4 | grep -c <span class="hljs-string">&quot;I&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ffmpeg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器升级OpenSSH脚本</title>
    <link href="/2025/04/29/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%87%E7%BA%A7OpenSSH%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/04/29/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%87%E7%BA%A7OpenSSH%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="麒麟V10服务器升级OpenSSH"><a href="#麒麟V10服务器升级OpenSSH" class="headerlink" title="麒麟V10服务器升级OpenSSH"></a>麒麟V10服务器升级OpenSSH</h1><blockquote><p>服务器架设在本地局域网，无法访问外网。 为修复OpenSSH漏洞,需要升级OpenSSH</p></blockquote><h2 id="下载所有依赖包"><a href="#下载所有依赖包" class="headerlink" title="下载所有依赖包"></a>下载所有依赖包</h2><ul><li>openssh-9.8p1.tar.gz</li><li>openssl-3.3.1.tar.gz</li><li>zlib-1.3.1.tar.gz</li></ul><h2 id="脚本正文"><a href="#脚本正文" class="headerlink" title="脚本正文"></a>脚本正文</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">cd</span> /opt<br>tar -zxf zlib-1.3.1.tar.gz<br><span class="hljs-built_in">cd</span> zlib-1.3.1<br><span class="hljs-comment">#检查配置并设置安装路径</span><br>./configure --prefix=/usr/local/zlib<br><span class="hljs-comment">#编译安装</span><br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> /opt<br>tar -zxf openssl-3.3.1.tar.gz<br><span class="hljs-built_in">cd</span> openssl-3.3.1<br>./Configure --prefix=/usr/local/openssl<br><span class="hljs-comment">#允许4个核心编译，速度快</span><br>make -j 4 &amp;&amp; make install<br><span class="hljs-comment">#让系统能够找到并加载 OpenSSL 库</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/usr/local/openssl/lib&quot;</span> &gt;&gt; /etc/ld.so.conf<br><span class="hljs-comment">#应用库配置</span><br>ldconfig<br><br><span class="hljs-built_in">cd</span> /opt<br>tar -zxf openssh-9.8p1.tar.gz<br><span class="hljs-built_in">cd</span> openssh-9.8p1/<br><span class="hljs-comment">#备份</span><br><span class="hljs-built_in">mv</span> /etc/ssh /etc/ssh_old.bak<br><span class="hljs-built_in">mv</span>  /usr/bin/ssh /usr/bin/ssh_old.bak<br><span class="hljs-built_in">mv</span>  /usr/bin/ssh-keygen /usr/bin/ssh-keygen_old.bak<br><span class="hljs-built_in">mv</span>  /usr/sbin/sshd /usr/sbin/sshd_old.bak<br><span class="hljs-built_in">cp</span> /etc/pam.d/sshd /etc/pam.d/sshd_old.bak<br>./configure --prefix=/usr/local/openssh --sysconfdir=/etc/ssh --with-pam --with-ssl-dir=/usr/local/openssl --with-zlib=/usr/local/zlib<br>make &amp;&amp; make install<br><br><span class="hljs-built_in">chown</span> -R root:root /etc/ssh<br><span class="hljs-built_in">chmod</span> 600 /etc/ssh/*_key<br><span class="hljs-comment">#更新系统服务和配置文件</span><br><span class="hljs-built_in">cp</span> /usr/local/openssh/sbin/sshd /usr/sbin/sshd<br><span class="hljs-built_in">cp</span> /usr/local/openssh/bin/ssh /usr/bin/ssh<br><span class="hljs-built_in">cp</span> /usr/local/openssh/bin/ssh-keygen /usr/bin/ssh-keygen<br><span class="hljs-built_in">cp</span> -p contrib/redhat/sshd.init /etc/init.d/sshd<br><span class="hljs-built_in">chmod</span> +x /etc/init.d/sshd<br><br> <span class="hljs-comment">#执行前，请确认sshd_config路径</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PermitRootLogin yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PubkeyAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PasswordAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config<br><br><br>systemctl <span class="hljs-built_in">enable</span> --now sshd<br><span class="hljs-comment">#重启ssh服务</span><br>systemctl restart sshd<br><br>ssh -V<br><br></code></pre></td></tr></table></figure><p>新建文件<code>updateOpenSSH.sh</code>, 将上面内容复制进去</p><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>将上面4个文件<code>openssh-9.8p1.tar.gz</code> <code>openssl-3.3.1.tar.gz</code> <code>zlib-1.3.1.tar.gz</code> <code>updateOpenSSH.sh</code>通过U盘拷贝到服务器<code>/opt</code>路径下</p><p>给<code>updateOpenSSH.sh</code>执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x updateOpenSSH.sh<br></code></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> updateOpenSSH.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h2 id="验证版本"><a href="#验证版本" class="headerlink" title="验证版本"></a>验证版本</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sshd</span> -V<br><span class="hljs-comment"># 如果输出9.8p1 那么就是成功了!</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用jar命令替换jar包中指定文件</title>
    <link href="/2025/03/18/%E4%BD%BF%E7%94%A8jar%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2jar%E5%8C%85%E4%B8%AD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
    <url>/2025/03/18/%E4%BD%BF%E7%94%A8jar%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2jar%E5%8C%85%E4%B8%AD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="使用jar命令替换jar包中指定文件"><a href="#使用jar命令替换jar包中指定文件" class="headerlink" title="使用jar命令替换jar包中指定文件"></a>使用jar命令替换jar包中指定文件</h1><h3 id="替换jar包中指定文件"><a href="#替换jar包中指定文件" class="headerlink" title="替换jar包中指定文件"></a>替换jar包中指定文件</h3><h4 id="1-列出指定文件的路径"><a href="#1-列出指定文件的路径" class="headerlink" title="1. 列出指定文件的路径"></a>1. 列出指定文件的路径</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">jar -tvf xxx.jar | <span class="hljs-keyword">grep</span> abc.<span class="hljs-keyword">class</span><br><br> # 输出结果示例 BOOT-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/netinfo/</span>system<span class="hljs-regexp">/service/</span>device<span class="hljs-regexp">/impl/</span>abc.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><h3 id="2-解压指定路径下的文件"><a href="#2-解压指定路径下的文件" class="headerlink" title="2. 解压指定路径下的文件"></a>2. 解压指定路径下的文件</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">jar -xvf xxx.jar <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/jar/</span><span class="hljs-keyword">file</span>/location<br><br>eg. <br>jar -xvf xxx.jar BOOT-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/netinfo/</span>system<span class="hljs-regexp">/service/</span>device<span class="hljs-regexp">/impl/</span>abc.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><h3 id="3-替换解压目录的下的文件"><a href="#3-替换解压目录的下的文件" class="headerlink" title="3. 替换解压目录的下的文件"></a>3. 替换解压目录的下的文件</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mv -i abc.<span class="hljs-keyword">class</span> BOOT-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/netinfo/</span>system<span class="hljs-regexp">/service/</span>device<span class="hljs-regexp">/impl/</span>abc.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><h3 id="4-更新到jar包中"><a href="#4-更新到jar包中" class="headerlink" title="4. 更新到jar包中"></a>4. 更新到jar包中</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">jar -uvf xxx.jar <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/jar/</span><span class="hljs-keyword">file</span>/location<br><br>eg.<br>jar -xvf xxx.jar BOOT-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/netinfo/</span>system<span class="hljs-regexp">/service/</span>device<span class="hljs-regexp">/impl/</span>abc.<span class="hljs-keyword">class</span><br><br># 如果一次替换多个文件, 直接拼接多个文件地址<br>eg. <br>jar -xvf xxx.jar BOOT-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/netinfo/</span>system<span class="hljs-regexp">/service/</span>device<span class="hljs-regexp">/impl/</span>abc.<span class="hljs-keyword">class</span> BOOT-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/netinfo/</span>system<span class="hljs-regexp">/service/</span>device<span class="hljs-regexp">/impl/</span>efg.<span class="hljs-keyword">class</span><br><br></code></pre></td></tr></table></figure><blockquote><p>如果替换的文件名带有<code>$</code>, 需将<code>$</code>转义.  <code>$</code>前加<code>\</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac搭建Java开发环境</title>
    <link href="/2025/03/07/Mac%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/03/07/Mac%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接: <a href="https://blog.csdn.net/qq_40271145/article/details/142143194">https://blog.csdn.net/qq_40271145/article/details/142143194</a></p></blockquote><h2 id="JDK的下载和安装"><a href="#JDK的下载和安装" class="headerlink" title="JDK的下载和安装"></a>JDK的下载和安装</h2><p>官网获取JDK:</p><p><a href="https://www.oracle.com/cn/">https://www.oracle.com/cn/</a></p><p><img src="https://p.ipic.vip/f9nxvj.png" alt="image-20250307160107769"></p><p>傻瓜式安装一路到底</p><h2 id="配置环"><a href="#配置环" class="headerlink" title="配置环"></a>配置环</h2><p>在<code>~/.zshrc </code> 追加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 我选择的是21版本</span><br><br><span class="hljs-comment"># JDK</span><br><span class="hljs-comment"># 配置JDK路径</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_21_HOME</span>=/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home<br><span class="hljs-comment"># 设置默认JDK版本</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=<span class="hljs-variable">$JAVA_21_HOME</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.<br><br><span class="hljs-comment"># 配置alias命令动态切换JDK版本</span><br>alias <span class="hljs-attribute">jdk21</span>=<span class="hljs-string">&quot;export JAVA_HOME=<span class="hljs-variable">$JAVA_21_HOME</span>&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>修改完毕后, 执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs she"># 让配置立即生效<br>$ source ~/.zshrc<br><br>$ java --version<br><br># java 21.0.6 2025-01-21 LTS<br># Java(TM) SE Runtime Environment (build 21.0.6+8-LTS-188)<br># Java HotSpot(TM) 64-Bit Server VM (build 21.0.6+8-LTS-188, mixed mode, sharing)<br></code></pre></td></tr></table></figure><h2 id="手撸Java代码验证"><a href="#手撸Java代码验证" class="headerlink" title="手撸Java代码验证"></a>手撸Java代码验证</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> $ vim test.java<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br>&#125;<br><br> $ java test.java<br> <span class="hljs-meta"># Hello World!</span><br><br></code></pre></td></tr></table></figure><h2 id="安装IntelliJ-IDEA-社区版"><a href="#安装IntelliJ-IDEA-社区版" class="headerlink" title="安装IntelliJ IDEA 社区版"></a>安装IntelliJ IDEA 社区版</h2><p>官网地址： <a href="https://www.jetbrains.com/idea/download/?section=mac">https://www.jetbrains.com/idea/download/?section=mac</a></p><p>界面往下拉, 选择<code>IntelliJ IDEA Community Edition</code>版本.</p><p><img src="https://p.ipic.vip/yhw7sg.png" alt="image-20250307161623022"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用symbolicatecrash解析KSCrash的崩溃日志</title>
    <link href="/2025/03/07/%E4%BD%BF%E7%94%A8symbolicatecrash%E8%A7%A3%E6%9E%90KSCrash%E7%9A%84%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97/"/>
    <url>/2025/03/07/%E4%BD%BF%E7%94%A8symbolicatecrash%E8%A7%A3%E6%9E%90KSCrash%E7%9A%84%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h3 id="1-新建文件夹crashLog"><a href="#1-新建文件夹crashLog" class="headerlink" title="1.新建文件夹crashLog"></a>1.新建文件夹<code>crashLog</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p crashLog</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">pwd</span>: /Users/apple/Desktop/crashLog</span><br></code></pre></td></tr></table></figure><h3 id="2-找出symbolicatecrash"><a href="#2-找出symbolicatecrash" class="headerlink" title="2. 找出symbolicatecrash"></a>2. 找出symbolicatecrash</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /Applications/Xcode.app/Contents</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">find . -name symbolicatecrash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制symbolicatecrash到crashLog文件夹下</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cp</span> ./SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash  ~/Desktop/crashLog</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/path/to/crashLog</span><br></code></pre></td></tr></table></figure><h3 id="3-复制temp-crash文件到crashLog文件夹"><a href="#3-复制temp-crash文件到crashLog文件夹" class="headerlink" title="3. 复制temp.crash文件到crashLog文件夹"></a>3. 复制temp.crash文件到crashLog文件夹</h3><h3 id="4-复制xxApp-app-dSYM文件到crashLog文件夹"><a href="#4-复制xxApp-app-dSYM文件到crashLog文件夹" class="headerlink" title="4. 复制xxApp.app.dSYM文件到crashLog文件夹"></a>4. 复制xxApp.app.dSYM文件到crashLog文件夹</h3><h3 id="4-在crashLog文件夹下解析"><a href="#4-在crashLog文件夹下解析" class="headerlink" title="4. 在crashLog文件夹下解析"></a>4. 在crashLog文件夹下解析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1./path/to/crashLog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ~/Desktop/crashLog</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.执行命令</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">xcode-select -p</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/Applications/Xcode.app/Contents/Developer</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> DEVELOPER_DIR=<span class="hljs-string">&quot;/Applications/XCode.app/Contents/Developer&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开始解析</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./symbolicatecrash temp.crash xxApp.app.dSYM &gt; crash.log</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mach-O</title>
    <link href="/2025/03/07/Mach-O/"/>
    <url>/2025/03/07/Mach-O/</url>
    
    <content type="html"><![CDATA[<h1 id="Mach-O"><a href="#Mach-O" class="headerlink" title="Mach-O"></a>Mach-O</h1><p>Mach-O是Mach object缩写，是mac&#x2F;ios上用于存储程序、库的标准格式</p><p><a href="https://developer.apple.com/library/archive/navigation/">https://developer.apple.com/library/archive/navigation/</a></p><h5 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h5><ul><li>MH_OBJECT<ul><li>目标文件(.o) </li><li>静态库(.a) 静态库其实就是多个.o合并在一起</li></ul></li><li>MH_EXECUTE<ul><li>可执行文件</li></ul></li><li>MH_DYLIB<ul><li>动态库文件(.dylib .framework)</li></ul></li><li>MH_DYLINKER<ul><li>动态链接编辑器 dyld</li></ul></li><li>MH_DSYM<ul><li>存储着二进制文件符号信息的文件</li></ul></li></ul><h5 id="Mach-O-组成"><a href="#Mach-O-组成" class="headerlink" title="Mach-O 组成"></a>Mach-O 组成</h5><p><a href="https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html">https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html</a></p><p>A Mach-O file has the following regions of data (the complete format is described in OS X ABI Mach-O File Format Reference):</p><ul><li>Header: Specifies the target architecture of the file, such as PPC, PPC64, IA-32, or x86-64.<br>文件类型、目标架构类型等</li><li>Load commands: Specify the logical structure of the file and the layout of the file in virtual memory.<br>描述文件在虚拟内存中的逻辑结构、布局</li><li>Raw segment data: Contains raw data for the segments defined in the load commands.<br>在load commands.中定义的Segment的原始数据</li></ul><h5 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h5><p>dyld用于加载以下类型的Mach-O文件</p><ul><li>MH_EXECUTE</li><li>MH_DYLINKER</li><li>MH_BUNDLE</li></ul><blockquote><p>App的可执行文件、动态库都是由dyld负责加载的</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS动态调试-逆向04</title>
    <link href="/2025/03/07/iOS%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E9%80%86%E5%90%9104/"/>
    <url>/2025/03/07/iOS%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95-%E9%80%86%E5%90%9104/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS动态调试-逆向04"><a href="#iOS动态调试-逆向04" class="headerlink" title="iOS动态调试-逆向04"></a>iOS动态调试-逆向04</h1><h4 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h4><p>最老版本的Xcode的调试器是GDB后来苹果就在这基础上开发了LLDB<br>现在LLDB都是内嵌在Xcode中</p><h4 id="Xcode的调试原理"><a href="#Xcode的调试原理" class="headerlink" title="Xcode的调试原理"></a>Xcode的调试原理</h4><p>当我们在手机上连接Xcode进行真机调试的时候,Xcode识别手机后会将debug server安装到我们的手机上 (&#x2F;Developer&#x2F;usr&#x2F;bin&#x2F;debugserver)</p><blockquote><p>debugserver一开始是放在mac的Xcode中的<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/9.0/DeveloperDiskImage.dmg/usr/bin/debugserver</code><br>当我们进入某个断点时,手机上的<code>debugsever</code>会监听<code>lldb</code>传过来的指令<br><code>debugserver</code>接收到指定的时候,再执行到我们的App上<br>接着App再把反馈信息传递给<code>debugserver</code> 然后<code>debugserver</code>再把消息反馈给<code>lldb</code>，<code>lldb</code>在把调试信息打印在Xcode上。</p></blockquote><p>Xcode调试具有局限性，只能调试通过Xcode安装的App</p><h4 id="动态调试任意App"><a href="#动态调试任意App" class="headerlink" title="动态调试任意App"></a>动态调试任意App</h4><p>通过上述Xcode的调试原理要想调试App debugserver、lldb这两个必不可少 因为没有源码 我们只能在终端上代替上面的Xcode</p><h5 id="step1"><a href="#step1" class="headerlink" title="step1."></a>step1.</h5><p>Xcode自动给我们按照的debugserver肯定是用不了了,因为权限不够。所以我们需要给他签上权限</p><p>从手机上拖出debugserver（&#x2F;Developer&#x2F;usr&#x2F;bin&#x2F;debugserver）<br>重签名 – 将下列保存成entitlement.entitlements放在debugserver同级文件夹（其实就 是个xml文件 后缀名不重要）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">plist</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span>   <span class="hljs-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.springboard.debugapplications<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>get-task-allow<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>task_for_pid-allow<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>run-unsigned-code<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>codesign</code>重签名<code>codesign -s – –entitlements ./entitlement.entitlements -f debugserver</code><br>将签名完成的<code>debugserver</code>放入手机<code>usr/bin</code>目录下<br>并给权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chomod +x <span class="hljs-regexp">/usr/</span>bin/debugserver<br></code></pre></td></tr></table></figure><p>这里不是之前替换原来的<code>debugserver</code> ,因为那个目录是只读的没有权限所以放在<code>/usr/bin/</code>下面</p><h5 id="step2"><a href="#step2" class="headerlink" title="step2."></a>step2.</h5><p>手机需要和mac做连接 详见SSH登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> /Users/apple/Desktop/jailbreak/usbmuxd/tcprelay.py -t <span class="hljs-number">22</span>:<span class="hljs-number">10010</span> <span class="hljs-number">10011</span>:<span class="hljs-number">10011</span>(让手机的<span class="hljs-number">22</span>、<span class="hljs-number">10011</span>端口映射到本地的<span class="hljs-number">10010</span>、<span class="hljs-number">10011</span>端口)<br></code></pre></td></tr></table></figure><p>登录手机</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root<span class="hljs-variable">@localhost</span> -p <span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>监听进程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#debugserver 附加到进程 并开启10011端口 等待所有的地址来连接</span><br><span class="hljs-attribute">debugserver</span> *:<span class="hljs-number">10011</span> -a 【进程名】<br></code></pre></td></tr></table></figure><h5 id="step3"><a href="#step3" class="headerlink" title="step3."></a>step3.</h5><p>debugserver 启动成功后就可以在macOs上连接了，在终端输入<code>lldb</code>进入lldb环境，</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">#由于上面的映射，直接连接本地的<span class="hljs-number">10011</span>端口<br>process connect connect:<span class="hljs-comment">//localhost:10011</span><br></code></pre></td></tr></table></figure><h4 id="debugserver-启动App"><a href="#debugserver-启动App" class="headerlink" title="debugserver 启动App"></a>debugserver 启动App</h4><p>可观察App是如何启动的</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gml">debugserver  -<span class="hljs-variable language_">x</span> auto *:端口号 App的可执行文件路径 <br><span class="hljs-comment">//或者</span><br>debugserver -<span class="hljs-variable language_">x</span> backboard *:<span class="hljs-number">10011</span> /路径<span class="hljs-variable language_">x</span>/<span class="hljs-variable language_">x</span>/xx/xx.app/xx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cycript的使用-逆向03</title>
    <link href="/2025/03/07/Cycript%E7%9A%84%E4%BD%BF%E7%94%A8-%E9%80%86%E5%90%9103/"/>
    <url>/2025/03/07/Cycript%E7%9A%84%E4%BD%BF%E7%94%A8-%E9%80%86%E5%90%9103/</url>
    
    <content type="html"><![CDATA[<h1 id="Cycript的使用-逆向03"><a href="#Cycript的使用-逆向03" class="headerlink" title="Cycript的使用-逆向03"></a>Cycript的使用-逆向03</h1><h4 id="Cycript能干什么"><a href="#Cycript能干什么" class="headerlink" title="Cycript能干什么"></a>Cycript能干什么</h4><blockquote><p>Cycript可以用来探索、修改、调试正在运行的Mac&#x2F;iOS App</p></blockquote><p><a href="http://www.cycript.org/">官网：http://www.cycript.org/</a></p><p><a href="http://www.cycript.org/manual/">文档：http://www.cycript.org/manual/</a></p><p>通过Cydia安装Cycript就可以使用了</p><h4 id="Cycript开启和关闭"><a href="#Cycript开启和关闭" class="headerlink" title="Cycript开启和关闭"></a>Cycript开启和关闭</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Cycript</span><br><br><span class="hljs-variable">Cycript</span> <span class="hljs-operator">-</span><span class="hljs-variable">p</span> 进程<span class="hljs-variable">ID</span><span class="hljs-operator">/</span>进程名称<br><br><span class="hljs-type">#</span> 退出：<br><span class="hljs-variable">controle</span> <span class="hljs-operator">+</span> <span class="hljs-built_in">D</span><br><br>取消输入：<span class="hljs-variable">control</span> <span class="hljs-operator">+</span> <span class="hljs-built_in">C</span><br></code></pre></td></tr></table></figure><h4 id="获取进程名称-进程id"><a href="#获取进程名称-进程id" class="headerlink" title="获取进程名称&#x2F;进程id"></a>获取进程名称&#x2F;进程id</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 获取所有进程</span><br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-A</span><br><span class="hljs-built_in">ps</span> - A ｜ grep 关键词<br></code></pre></td></tr></table></figure><h4 id="Cycript常用语法"><a href="#Cycript常用语法" class="headerlink" title="Cycript常用语法"></a>Cycript常用语法</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">UIApp UIApp 等价于<span class="hljs-selector-attr">[UIApplication sharedApplication]</span><br><br>定义变量 <span class="hljs-selector-tag">var</span> 变量名 = 变量值<br><br>用内存地址获取对象 #内存地址<br><br>已加载的所有OC类 ObjectiveC<span class="hljs-selector-class">.classes</span><br><br>查看对象的所有成员变量 *对象<br><br>递归打印View的所有子控件 对象<span class="hljs-selector-class">.recursiveDescription</span>()<span class="hljs-selector-class">.toString</span>()<br><br>筛选出某种类型的对象 <span class="hljs-built_in">choose</span>(UIViewController) <span class="hljs-built_in">choose</span>(UITableViewCell)<br></code></pre></td></tr></table></figure><h4 id="Cycript高级使用"><a href="#Cycript高级使用" class="headerlink" title="Cycript高级使用"></a>Cycript高级使用</h4><p>我们可以将常用的Cycript代码封装在一个.cy文件中<br>然后将.cy文件拖进手机<code>/usr/lib/cycript0.9</code>路径下<br>使用时 导入XX.py @import XX</p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift混编库的那些事儿</title>
    <link href="/2025/03/07/Swift%E6%B7%B7%E7%BC%96%E5%BA%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2025/03/07/Swift%E6%B7%B7%E7%BC%96%E5%BA%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Swift混编库的那些事儿"><a href="#Swift混编库的那些事儿" class="headerlink" title="Swift混编库的那些事儿"></a>Swift混编库的那些事儿</h1><h5 id="1、在swift-framwork中调用oc且不向外暴露"><a href="#1、在swift-framwork中调用oc且不向外暴露" class="headerlink" title="1、在swift framwork中调用oc且不向外暴露"></a>1、在swift framwork中调用oc且不向外暴露</h5><ul><li>使用module.modulemap文件</li><li><code>Build Setting</code> -&gt;<code>Swift Compile - Search Path</code> 中设置<code>module.modulemap</code>路径 <code>&quot;$(SRCROOT)/SwiftySdk&quot;</code></li><li>Xcode16+ 请主动设置 <code>install generated header</code> 为<code>YES</code> 否则报错<code>Command SwiftVerifyEmittedModuleInterface failed with a nonzero exit code</code></li></ul><h5 id="2、提供的oc、swift混编私有-framework是动态库"><a href="#2、提供的oc、swift混编私有-framework是动态库" class="headerlink" title="2、提供的oc、swift混编私有.framework是动态库"></a>2、提供的oc、swift混编私有.framework是动态库</h5><ul><li>设置 <code>Build Setting</code> -&gt;<code>Build Libraries for Distribution</code>为<code>YES</code> 实现不同版本编译器之间的兼容问题</li></ul><h5 id="3、提供的oc、swift混编私有-framework是静态库-且podspec中依赖Alamofire这样的第三方库"><a href="#3、提供的oc、swift混编私有-framework是静态库-且podspec中依赖Alamofire这样的第三方库" class="headerlink" title="3、提供的oc、swift混编私有.framework是静态库 且podspec中依赖Alamofire这样的第三方库"></a>3、提供的oc、swift混编私有.framework是静态库 且podspec中依赖<code>Alamofire</code>这样的第三方库</h5><ul><li><p>设置 <code>Build Setting</code> -&gt;<code>Build Libraries for Distribution</code>为<code>YES</code> 实现不同版本编译器之间的兼容问题</p></li><li><p>集成方需要在podfile 中加入 以下代码</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">post_install <span class="hljs-built_in">do</span> |<span class="hljs-type">installer</span>|<br>  <span class="hljs-type">installer</span>.pods_project.targets.each <span class="hljs-built_in">do</span> |<span class="hljs-type">target</span>|<br>   <span class="hljs-type">target</span>.build_configurations.each <span class="hljs-built_in">do</span> |<span class="hljs-type">config</span>|<br>    <span class="hljs-type">config</span>.build_settings[&#x27;BUILD_LIBRARY_FOR_DISTRIBUTION&#x27;] = &#x27;YES&#x27;<br>   <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="4、经过1的操作发现oc工程可以集成成功，swift工程中集成报了2个错-1-Failed-to-build-module-SwiftOCDynamicSdk-this-SDK-is-not-supported-by-the-compiler-the-SDK-is-built-with-Apple-Swift-version-5-5-swiftlang-1300-0-31-1-clang-1300-0-29-1-while-this-compiler-is-Apple-Swift-version-5-7-swiftlang-5-7-0-127-4-clang-1400-0-29-50-Please-select-a-toolchain-which-matches-the-SDK-2-No-such-module-‘OCXXXModule’"><a href="#4、经过1的操作发现oc工程可以集成成功，swift工程中集成报了2个错-1-Failed-to-build-module-SwiftOCDynamicSdk-this-SDK-is-not-supported-by-the-compiler-the-SDK-is-built-with-Apple-Swift-version-5-5-swiftlang-1300-0-31-1-clang-1300-0-29-1-while-this-compiler-is-Apple-Swift-version-5-7-swiftlang-5-7-0-127-4-clang-1400-0-29-50-Please-select-a-toolchain-which-matches-the-SDK-2-No-such-module-‘OCXXXModule’" class="headerlink" title="4、经过1的操作发现oc工程可以集成成功，swift工程中集成报了2个错 1.Failed to build module &#39;SwiftOCDynamicSdk&#39;; this SDK is not supported by the compiler (the SDK is built with &#39;Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)&#39;, while this compiler is &#39;Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)&#39;). Please select a toolchain which matches the SDK. 2.No such module ‘OCXXXModule’"></a>4、经过1的操作发现oc工程可以集成成功，swift工程中集成报了2个错 1.<code>Failed to build module &#39;SwiftOCDynamicSdk&#39;; this SDK is not supported by the compiler (the SDK is built with &#39;Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)&#39;, while this compiler is &#39;Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)&#39;). Please select a toolchain which matches the SDK.</code> 2.No such module ‘OCXXXModule’</h5><p><strong>骚操作来了</strong></p><ul><li><p>在swift工程中创建一个</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">module</span>.modulemap<br></code></pre></td></tr></table></figure><p>文件，并申明一个报错缺失的module</p><p>示例：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#这里<br><span class="hljs-keyword">module</span> OCXXXModule <br>&#123;<br>    <span class="hljs-keyword">export</span> *<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Build Setting</code> -&gt;<code>Swift Compile - Search Path</code> 中设置<code>module.modulemap</code>路径 <code>&quot;$(SRCROOT)/xxx&quot;</code></p></li></ul><h4 id="5、拓展-Swift组件内调用OC，调用-OC-的私有头文件"><a href="#5、拓展-Swift组件内调用OC，调用-OC-的私有头文件" class="headerlink" title="5、拓展: Swift组件内调用OC，调用 OC 的私有头文件"></a>5、拓展: Swift组件内调用OC，调用 OC 的私有头文件</h4><p>5.1 该swift组件需要以二进制方式被另一Swift2混编组件集成</p><ul><li>原理同4<br>5.2 该swift组件需要以以源码方式 被另一Swift2混编组件集成</li><li>import该私有module</li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自动化打包脚本</title>
    <link href="/2025/03/07/iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/03/07/iOS%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS自动化打包脚本"><a href="#iOS自动化打包脚本" class="headerlink" title="iOS自动化打包脚本"></a>iOS自动化打包脚本</h1><blockquote><p>闲来无事学习一下shell</p></blockquote><h4 id="打包xcframework"><a href="#打包xcframework" class="headerlink" title="打包xcframework"></a>打包xcframework</h4><ul><li>由于xcode13的模拟器也包含arm64架构，移除模拟器arm64架构，<code>build Setting</code>&#x3D;&gt;<code>Excluded Architectures</code>&#x3D;&gt;勾选<code>Any ios simulator sdk</code> 添加<code>arm64</code> 也可在脚本中设置-arch</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br>set -e<br>set -u<br>set -o pipefail<br><br>SCHEME_NAME=sdk<br>WORKSPACE_NAME=sdk<br><span class="hljs-comment">#打包环境</span><br>CONFIGURATION=Release<br><br><span class="hljs-comment">#cd到脚本绝对路径下</span><br>ROOT_PATH=$(cd <span class="hljs-string">&quot;$(dirname &quot;</span><span class="hljs-variable">$&#123;BASH_SOURCE[0]&#125;</span><span class="hljs-string">&quot;)&quot;</span>; pwd)<br><span class="hljs-comment">#输出路径</span><br>EXPORT_PATH=<span class="hljs-variable">$&#123;ROOT_PATH&#125;</span>/archive<br><br><br><span class="hljs-comment">#chech scheme</span><br>xcodebuild -list || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">#clean</span><br><span class="hljs-keyword">function</span> arch_clean &#123;<br>    xcodebuild clean \<br>    -workspace <span class="hljs-variable">$&#123;WORKSPACE_NAME&#125;</span>.xcworkspace \<br>    -scheme <span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span> \<br>    -configuration <span class="hljs-variable">$&#123;CONFIGURATION&#125;</span><br>&#125;<br><br><span class="hljs-comment">#下面iphonesimulator15.5 可根据 xcodebuild -showsdks查看</span><br> <span class="hljs-comment"># #打包模拟器</span><br><span class="hljs-keyword">function</span> archive_simulator &#123;<br>     xcodebuild archive \<br>     -workspace <span class="hljs-variable">$&#123;WORKSPACE_NAME&#125;</span>.xcworkspace \<br>     -scheme <span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span> \<br>     -destination=<span class="hljs-string">&quot;iOS Simulator&quot;</span> \<br>     -sdk iphonesimulator15.<span class="hljs-number">5</span> \ <br>     -configuration <span class="hljs-variable">$&#123;CONFIGURATION&#125;</span> \<br>     SKIP_INSTALL=NO \<br>     BUILD_LIBRARIES_FOR_DISTRIBUTION=YES \<br>     -archivePath <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/ios_simulator.xcarchive<br> &#125;<br><br><span class="hljs-keyword">function</span> archive_iosDevice &#123;<br>     xcodebuild archive \<br>     -workspace <span class="hljs-variable">$&#123;WORKSPACE_NAME&#125;</span>.xcworkspace \<br>     -scheme <span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span> \<br>    -sdk iphoneos \<br>     -destination=<span class="hljs-string">&quot;iOS&quot;</span> \<br>     -configuration <span class="hljs-variable">$&#123;CONFIGURATION&#125;</span> \<br>     SKIP_INSTALL=NO \<br>     BUILD_LIBRARIES_FOR_DISTRIBUTION=YES \<br>     -archivePath <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/ios_device.xcarchive<br> &#125;<br><br> <span class="hljs-comment"># #创建xcframework</span><br> <span class="hljs-keyword">function</span> create_xcframework &#123;<br>     xcodebuild -create-xcframework \<br>     -framework <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span><span class="hljs-regexp">/ios_device.xcarchive/</span>Products<span class="hljs-regexp">/Library/</span>Frameworks/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.framework \<br>     -framework <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span><span class="hljs-regexp">/ios_simulator.xcarchive/</span>Products<span class="hljs-regexp">/Library/</span>Frameworks/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.framework \<br>     -output <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.xcframework<br> &#125;<br><br><br> arch_clean || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br> archive_simulator || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br> <span class="hljs-keyword">if</span> [[ -e <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/ios_simulator.xcarchive ]] ;then<br>     echo -e <span class="hljs-string">&quot;\033[1135m🍺🍺🍺🍺🍺🍺xcarchive ios_simulator success!🍺🍺🍺🍺🍺🍺 \033[0m&quot;</span><br> <span class="hljs-keyword">else</span><br>     echo -e <span class="hljs-string">&quot;\033[1135m❌❌❌❌❌❌xcarchive ios_simulator fail!❌❌❌❌❌❌ \033[0m&quot;</span><br> fi<br><br>archive_iosDevice || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> [[ -e <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/ios_device.xcarchive ]] ;then<br>     echo -e <span class="hljs-string">&quot;\033[1135m🍺🍺🍺🍺🍺🍺xcarchiveios_device success!🍺🍺🍺🍺🍺🍺 \033[0m&quot;</span><br> <span class="hljs-keyword">else</span><br>     echo -e <span class="hljs-string">&quot;\033[1135m❌❌❌❌❌❌xcarchive ios_device fail!❌❌❌❌❌❌ \033[0m&quot;</span><br> fi<br><br> cd <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span> <br> create_xcframework || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br> <span class="hljs-keyword">if</span> [[ -e <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.xcframework ]] ;then<br>    echo -e <span class="hljs-string">&quot;\033[1135m🍺🍺🍺🍺🍺🍺create $&#123;SCHEME_NAME&#125;.xcframework success!🍺🍺🍺🍺🍺🍺 \033[0m&quot;</span><br> <span class="hljs-keyword">else</span><br>     echo -e <span class="hljs-string">&quot;\033[1135m❌❌❌❌❌❌create $&#123;SCHEME_NAME&#125;.xcframework fail!❌❌❌❌❌❌ \033[0m&quot;</span><br> fi<br><br> open .<br></code></pre></td></tr></table></figure><h4 id="打包ipa"><a href="#打包ipa" class="headerlink" title="打包ipa"></a>打包ipa</h4><p>把shell脚本和ExportOptions.plist一起放在根目录下，下面例子中ExportOptions.plist为ad-hoc模式。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#!/bin/bash</span><br>set -e<br>set -u<br>set -o pipefail<br><br>SCHEME_NAME=SdkApp<br>WORKSPACE_NAME=sdk<br><span class="hljs-comment">#打包环境</span><br>CONFIGURATION=Release<br><span class="hljs-comment">#cd到脚本绝对路径下</span><br>ROOT_PATH=$(cd <span class="hljs-string">&quot;$(dirname &quot;</span><span class="hljs-variable">$&#123;BASH_SOURCE[0]&#125;</span><span class="hljs-string">&quot;)&quot;</span>; pwd)<br><span class="hljs-comment">#输出路径</span><br>EXPORT_PATH=<span class="hljs-variable">$&#123;ROOT_PATH&#125;</span>/archive<br>EXPORT_IPA_PATH=<span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/ipa<br><br><span class="hljs-comment">#chech scheme</span><br>xcodebuild -list || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">#clean</span><br><span class="hljs-keyword">function</span> arch_clean &#123;<br>    xcodebuild clean \<br>    -workspace <span class="hljs-variable">$&#123;WORKSPACE_NAME&#125;</span>.xcworkspace \<br>    -scheme <span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span> \<br>    -configuration <span class="hljs-variable">$&#123;CONFIGURATION&#125;</span><br>&#125;<br><br><span class="hljs-comment">#编译</span><br><span class="hljs-keyword">function</span> archive &#123;<br>    xcodebuild archive \<br>    -workspace <span class="hljs-variable">$&#123;WORKSPACE_NAME&#125;</span>.xcworkspace \<br>    -scheme <span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span> \<br>    -configuration <span class="hljs-variable">$&#123;CONFIGURATION&#125;</span> \<br>    -archivePath <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.xcarchive<br>&#125;<br><br><span class="hljs-comment">#打包导出</span><br><span class="hljs-keyword">function</span> arch_export &#123;<br>    xcodebuild -exportArchive \<br>    -archivePath <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.xcarchive \<br>    -exportPath <span class="hljs-variable">$&#123;EXPORT_IPA_PATH&#125;</span> \<br>    -exportOptionsPlist <span class="hljs-variable">$&#123;ROOT_PATH&#125;</span>/ExportOptions.plist <br>&#125;<br><br><br> arch_clean || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br> archive || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br> <span class="hljs-keyword">if</span> [[ -e <span class="hljs-variable">$&#123;EXPORT_PATH&#125;</span>/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.xcarchive ]] ;then<br>     echo -e <span class="hljs-string">&quot;\033[1;35m🍺🍺🍺🍺🍺xcarchive success！🍺🍺 \033[0m&quot;</span><br> <span class="hljs-keyword">else</span><br>     echo -e <span class="hljs-string">&quot;\033[1;35m❌❌ fail ❌❌❌❌\033[0m&quot;</span><br> fi<br><br>arch_export || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> [[ -e <span class="hljs-variable">$&#123;EXPORT_IPA_PATH&#125;</span>/<span class="hljs-variable">$&#123;SCHEME_NAME&#125;</span>.ipa ]] ;then<br>     echo -e <span class="hljs-string">&quot;\033[1;35m🍺🍺🍺🍺🍺xcarchive success！🍺🍺 \033[0m&quot;</span><br> <span class="hljs-keyword">else</span><br>     echo -e <span class="hljs-string">&quot;\033[1;35m❌❌ fail ❌❌❌❌\033[0m&quot;</span><br> fi<br><br>open <span class="hljs-variable">$&#123;EXPORT_IPA_PATH&#125;</span><br></code></pre></td></tr></table></figure><p>ExportOptions.plist 文件&lt;可手动打包一次后，生成&gt;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">plist</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>destination<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>export<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>method<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>ad-hoc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>signingStyle<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>automatic<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>stripSwiftSymbols<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>thinning<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>none<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS制作私有库</title>
    <link href="/2025/03/07/iOS%E5%88%B6%E4%BD%9C%E7%A7%81%E6%9C%89%E5%BA%93/"/>
    <url>/2025/03/07/iOS%E5%88%B6%E4%BD%9C%E7%A7%81%E6%9C%89%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="iOS制作私有库"><a href="#iOS制作私有库" class="headerlink" title="iOS制作私有库"></a>iOS制作私有库</h1><p>大致步骤入下:</p><ul><li>创建远程索引库、远程私有库</li><li>创建远程索引库时，最好同时初始化一个readme文件。否者后面操作会报错，解决也是需要在远程索引仓库创建一个空文件</li><li>创建本地私有库、关联远程私有库<ul><li>终端输入<code>pod lib create xxxSDK </code></li><li><code>cd xxxSDK</code></li><li><code>git remote add origin https:xxx.xxxSDK.git</code></li></ul></li><li>本地添加私有库索引<ul><li>终端输入<code>pod repo add name[索引名] source [远程索引地址] </code></li><li>例如：<code>pod repo add PluginPodspecs http://xxx.pluginpodspecs.git</code></li><li><code>pod repo list</code>查看</li></ul></li><li>添加本地私有库内容、修改<code>xxx.podspec</code>文件</li><li>本地校验<ul><li><code>pod lib lint --verbose --allow-warnings </code></li><li>如果私有库里有嵌套另一个私有库 在上面命令后面在加上参数<code>--sources=[索引库址],https://github.com/CocoaPods/Specs.git </code></li></ul></li><li>私有库提交到远程仓库、打tag<ul><li><code>xxx.podspec</code>文件具体可查看官方文档 <a href="https://guides.cocoapods.org/syntax/podspec.html">https://guides.cocoapods.org/syntax/podspec.html</a></li></ul></li><li>远程校验<ul><li><code>pod spec lint --allow-warnings --verbose</code></li></ul></li><li>提交本地索引到远程<ul><li><code>cd xxxSDK &amp;&amp; pod repo push [本地索引库] [索引文件名]</code></li><li><code>pod repo push PluginPodspecs xxxSDK.podspec --verbose --allow-warnings</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh登录iPhone-逆向01</title>
    <link href="/2025/03/07/ssh%E7%99%BB%E5%BD%95iPhone-%E9%80%86%E5%90%9101/"/>
    <url>/2025/03/07/ssh%E7%99%BB%E5%BD%95iPhone-%E9%80%86%E5%90%9101/</url>
    
    <content type="html"><![CDATA[<h1 id="ssh登录iPhone-逆向01"><a href="#ssh登录iPhone-逆向01" class="headerlink" title="ssh登录iPhone-逆向01"></a>ssh登录iPhone-逆向01</h1><h2 id="SSH登录iPhone"><a href="#SSH登录iPhone" class="headerlink" title="SSH登录iPhone"></a>SSH登录iPhone</h2><h3 id="无线模式-iphone和mac在同一局域网下"><a href="#无线模式-iphone和mac在同一局域网下" class="headerlink" title="无线模式 (iphone和mac在同一局域网下)"></a>无线模式 (iphone和mac在同一局域网下)</h3><ul><li>在iPhone上通过Cydia安装OpenSSH工具</li><li>mac终端输入$ssh 账户@ip地址 (iOS下2个常用账户：root、mobile)</li></ul><p>例：<code>ssh root@170.16.4.000</code></p><blockquote><p>初始密码:alpine</p></blockquote><h3 id="有线模式-USB"><a href="#有线模式-USB" class="headerlink" title="有线模式&#x2F;USB"></a>有线模式&#x2F;USB</h3><blockquote><p>该种方式采用的是Mac上的一个服务程序usbmuxd</p></blockquote><p>位置在&#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;MobileDevice.framework&#x2F;Resources&#x2F;usbmuxd</p><ul><li>第一步需要下载一个usbmuxd工具包（主要用到里面的usbmux.py、tcprelay.py文件）</li></ul><p><a href="https://links.jianshu.com/go?to=https://git.sukimashita.com/usbmuxd.git/">https://git.sukimashita.com/usbmuxd.git/</a></p><p>选择1.0.8版本 , 将usbmux.py、tcprelay.py文件放在方便的位置</p><ul><li>终端输入 <code>python tcprelay.py的路径 -t 22:10010</code></li></ul><p>例：<code>python /Users/mac/Desktop/python-client/tcprelay.py -t 22:10010</code></p><blockquote><p>iPhone默认是使用22端口进行SSH通信，采用的是TCP协议. 我们iPhone 22端口映射到Mac本地的10010端口</p></blockquote><ul><li>另起一个终端窗口输入<code>ssh root@localhost -p 10010</code></li></ul><p>或<code>ssh root@127.0.0.1 -p 10010</code></p><blockquote><p>附: 终端输入<code>exit</code>退出登录</p></blockquote><h3 id="拓展-ssh免密登陆"><a href="#拓展-ssh免密登陆" class="headerlink" title="拓展:ssh免密登陆"></a>拓展:ssh免密登陆</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">修改密码啥的见Cydia介绍<br></code></pre></td></tr></table></figure><p><em>ssh 每次登录都需要输入密码令人烦躁</em></p><ul><li>创建ssh</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen</span><br></code></pre></td></tr></table></figure><ul><li>将生成的公钥追加到授权文件尾部</li></ul><p>终端执行下面命令（如果iphone没有.ssh文件夹 自己手动创建）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">scp -P <span class="hljs-number">10010</span> ~<span class="hljs-regexp">/.ssh/id</span>_rsa.pub root<span class="hljs-variable">@localhost</span><span class="hljs-symbol">:~/</span>.ssh<br></code></pre></td></tr></table></figure><p>接着登陆iPhone 执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub &gt;&gt; authorized_keys<br><span class="hljs-built_in">rm</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>退出手机在登录就不需要密码了</p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
